---
apiVersion: v1
kind: ConfigMap
metadata:
  name: q10
  labels:
    question.kontest.amsy.dev: "10"
data:
  question: |-
    永続化領域の要求を行うリソースがPersistentVolumeClaim(PVC)です。PVCが作成されると、利用可能なPersistentVolume(PV)の中から最適なリソースがPodに割り当てられます。
    複数のノードからReadもWriteも可能で、800Mi以上のボリュームを要求するように以下のマニフェストファイルを変更してください。

    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: cndt-pvc
      labels:
        app: cndt
    spec:
      storageClassName: cndt
  hint: |-
    https://kubernetes.io/docs/concepts/storage/persistent-volumes/
  base_content.yaml: |-
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: cndt-pvc
      labels:
        app: cndt
    spec:
      storageClassName: cndt
  answer.yaml: |-
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: cndt-pvc
      labels:
        app: cndt
    spec:
      storageClassName: cndt
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 800Mi
  comment: |-
    【解説 by カサレアル】
    PersistentVolumeClaim(PVC)は「このスペックを満たすPersistenceVolumeをください」ということが書かれた、言わばPersistenceVolumeの要件定義書です。
    spec.accessModes[] にアクセスモード（ReadWriteMany・ReadWriteOnce・ReadOnlyManyの中から複数指定可能）を指定します。ボリュームの種類によって、サポートしているアクセスモードが異なります。リファレンスの下記ページにボリュームとアクセスモードの一覧がありますので、参考にしてください。
    https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
    spec.resources.requests.storage に最低限必要なデータ容量を指定します。ちなみに 800Mi と 800M では意味が異なります。 1Mi = 1024Ki 、 1M = 1000K です。
  author: |-
    Yutaka Ichikawa (@cyberblack28)
